What happens when you initialize a repository? Why do you need to do it?

    A .git folder is created, an initially it doesn't track any file history.
    There's no commit yet.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    It's like a 'pre-commit'. It takes a snapshot of the files at the time you add them to the staging area, but doesn't add them to the repository. If I change an added file in the working directory, these changes don't go to the staging area.
    It's good if you want to save the state of a file before committing just to experiment some quick change to it, so you don't create a possible undesired commit.

How can you use the staging area to make sure you have one commit per logical
change?

    I can use "git diff --staged" to see what changes were made since the last commit, or I can use "git status" to see what files are in the staging area

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    When I need to make experimental changes, or work in the next release version of a program while the current release is having bug fixes.

How do the diagrams help you visualize the branch structure?

    They help me see the repository structure in a more global and comprehensive way.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    The result is a commit with the changes of both the merged branches.
    We represent it like that because the merge commit has two parents.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

    Pros: saves a lot of time for the user when there are no conflicts.
    Cons: can't resolve conflicts.
